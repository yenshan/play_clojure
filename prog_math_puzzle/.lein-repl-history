(take 10 (iterate inc 0))
(take 10 (iterate inc 10))
(Integer/toDeciamString 10)
(Integer/toString 10)
(Interger/toBinaryString 10)
(Integer/toBinaryString 10)
(reverse "123")
(str (reverse "123"))
(apply str (reverse "123"))
q
exit
'n
['n]
first ['n]
(first ['n])
(remove 'n [1 2 3 'n 'n 3 'n])
(doc remove)
(remove #(= 'n) [1 2 3 'n 'n 3 'n])
(remove #(= % 'n) [1 2 3 'n 'n 3 'n])
(take 10 (iterate #(* % 10) 1))
(map * [1 2 3] [2 3 4])
(map * [1 2 3] [1 10 100])
(map * [1 2 3] (iterate #(* % 10) 1))
(reduce + (map * [1 2 3] (iterate #(* % 10) 1)))
(first [1 2])
(take 1 [1 2])
(take 10000 (iterate inc 1))
(doc map-indexed)
(class [])
(class '())
(type [])
(type (for [1 (range 0 2) 1))
(type (for [1 (range 0 2)] 1))
(def a (for [_ (range 0 2)] 1))
(type a)
(class a)
(= (type a) (type '()))
(cons [1] [2])
(cons 1 [2])
exit
(conj [] 1)
(range 1 10 2)
(java.util.Date)
(java.util.Date .)
(java.util.Date. )
(java.util.Date 1966 10 10)
(java.util.Date. 1966 10 10)
(toString. (java.util.Data 1966 10 10))
(.toString (java.util.Data 1966 10 10))
(.toString (java.util.Date. 1966 10 10))
(java.util.Date/UTC 1966 10 10)
(java.util.Date.UTC 1966 10 10)
(java.util.Date/UTC 1966 10 10)
(java.util.Date/UTC 1966 10 10 0 0)
(java.util.Date/UTC 1966 10 10 0 0 0)
(java.util.Date/UTC 1966 10 11 0 0 0)
(java.util.Date/UTC 1966 10 12 0 0 0)
(def a (java.util.Date/UTC 1966 10 12 0 0 0))
(def b (java.util.Date/UTC 1966 10 13 0 0 0))
(def c (java.util.Date/UTC 1966 10 14 0 0 0))
(- b a)
(- c b)
(java.util.Date. a)
(.toString (java.util.Date. a))
(.toGMTString (java.util.Date. a))
(.setTime (Date.) a)
(.setTime (java.util.Date.) a)
a
(.toBinaryString 10 2)
(.toBinaryString (Integer. 10) 2)
(Integer/toBinaryString (Integer. 10) 2)
(Integer/toBinaryString 10)
(reverse (Integer/toBinaryString 10))
(apply str (reverse (Integer/toBinaryString 10)))
(some #(= % 1) [1 3 4])
(doc not-any?)
(not-any? #(= % 1) [2 3])
(not-any? #(= % 1) [2 1])
(not-any? #(= % 1) '())
(map concat [[1][3]] [[1][2]]0
(map concat [[1][3]] [[1][2]])
(take 10 (repeat 1))
(doc remove)
(concat [1] nil)
q
qiut
quit
(doc keys)
(for [i (range 10) j (range 5)] [i j])
(for [j (range 5) i (range 10)] [i j])
(def m (for [j (range 5) i (range 10)] [i j]))
(update m [0 0] inc)
(range 9 0 -1)
m
(filter (fn [[i j]] (= (- 9 i) (- 5 j))))
(filter (fn [[i j]] (= (- 9 i) (- 5 j)) m)
(filter (fn [[i j]] (= (- 9 i) (- 5 j))) m)
(def m (for [j (range 5) i (range 7)] [i j]))
m
(filter (fn [[i j]] (= (- 9 i) (- 5 j))) m)
(filter (fn [[i j]] (= (- 7 i) (- 5 j))) m)
(first '())
(rest '())
(next '())
