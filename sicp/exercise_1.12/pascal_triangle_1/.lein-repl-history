(map (+ % %) [[1 1] [2 2]])
(map #(+ % %) [[1 1] [2 2]])
(map (fn [a b] (+ a b)) [[1 1] [2 2]])
(map (fn [[a b]] (+ a b)) [[1 1] [2 2]])
(next [])
(next [1])
(next [1 2])
(first [1 2])
(second [1 2])
(second [1])
(let [[a & b] [1 2 3]] (print a b))
(let [[a b & c] [1 2 3]] (print a b))
(let [[a b & c] [1 ]] (print a b))
(and nil 1)
(and 1 1)
(doc not-nil)
(defn a [[a b & r]] (print a b c))
(defn a [[a b & r]] (print a b r))
(a [1 2 3])
(doc conj)
(doc cons)
(doc assoc)
(doc vector(
(doc vector)
(vector 3 [1 2] 4)
(apply vector 3 [1 2] 4)
(apply vector [1 2])
(apply vector [1] [1 2] [2])
(doc conj)
(conj [1 2] 1)
(conj [1 2] 3)
(conj 1 [1 2] 3)
(conj 3 [1 2])
(conj [3] [1 2])
(concat 1 2 3]
(concat 1 2 3)
(man concat)
(doc concat)
(concat 1 2 3)
(concat 1 [2] 3)
(concat [1] [2] [3])
(vec (concat [1] [2] [3]))
(map (fn [[a b]] (+ a b)) [1])
(map (fn [[a b]] (+ a b)) [1 1])
(map (fn [[a b]] (+ a b) [1 1])
(map (fn [[a b]] (+ a b)) [1 1])
(map (fn [[a b]] (+ a b)) [[1 1]])
(map (fn [[a b]] (+ a b)) [[1]])
(map (fn [[a b]] (+ a b)) nil)
(doc conj)
(doc cons)
(doc conj)
(doc cons)
(cons [1] [2])
(cons [1] [[2]i])
(cons [1] [[2]])
(doc cons)
(doc conj)
(conj '(a b) 'c)
exit
(pascal-triangle)
(use 'pascal-triangle.core :reload)
(pascal-triangle)
(take 5 (pascal-triangle))
bt
(pascal-triangle)
(use 'pascal-triangle.core :reload)
(pascal-triangle)
(use 'pascal-triangle.core :reload)
(pascal-triangle)
q
ls
exit
(doc iterate)
(take 5 (iterate + 1)
(take 5 (iterate + 1))
(iterate)
(iterate + 1)
(nth (pascal-triangle) 5)
(conv-dat [1 2 1])
(use 'pascal-triangl.core :reload)
(use 'pascal-triangle.core :reload)
(conv-dat [1 2 1])
(-main)
(use 'pascal-triangle.core :reload)
(-main)
(use 'pascal-triangle.core :reload)
(-main)
(use 'pascal-triangle.core :reload)
(-main)
(use 'pascal-triangle.core :reload)
(-main)
(doc vector)
(apply vector 1 2 3)
(use 'pascal-triangle.core :reload)
(-main)
exit
