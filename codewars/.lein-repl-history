(pow 1 2)
(power 1 2)
(repeat 1 2)
(repeat 2 2)
(repeat 2 4)
(repeat 4 4)
(apply * (repeat 4 4))
(apply * (repeat 2 2))
(apply * (repeat 2 3))
(range 1 2)
(range 1 3)
(int \1)
(int \0
)
(str 123)
(map #(- (int %) \0) (str 123))
(map #(- (int %) (int \0)) (str 123))
(map #(- (int %) (int \0)) (str 1234))
(doc iterate)
(take 5 (iterate 1 inc))
(take 5 (iterate inc 1))
(Math/pow 1 2)
(reduce * 2 2)
(zip [1 2 3] [\a \b])
(zipmap [1 2 3] [\a \b])
(map {\I 1, \O 2} "IO")
(map {\I 1, \O 2} "OI")
(doc split)
(require '[clojure.string :as str])
(str/split "abc efg" " ")
(str/split "abc efg" #" ")
(first (str/split "abc efg" #" "))
(second (str/split "abc efg" #" "))
(list \a \b)
(vec \a \b)
(vector \a \b)
