(doc identity)
exit
(find-doc inter)
(find-doc "inter")
(/ 123 10)
(div 123 10)
(find-doc divide)
(find-doc "divide")
(unchecked-divide-int 123 10)
(unchecked-divide-int 1 10)
(unchecked-divide-int 12 10)
(compare 123 345)
(compare 1230 345)
(doc sort)
(doc sort-by)
(o
(compare [2 0 0] [2 1])
(compare [2 0]  [2 1])
(compare 1 2)
(compare 2 1)
(range 8)
(range 1 8)
(range 1 9)
(range 9)
(range )
(range 8)
(doc repeat)
(take 8 (repeat 1))
(take 8 (repeat '+))
(take 8 (repeat +))
(conj 'x '())
(doc conj)
(doc reduce)
(nth [1 2 3] 3)
(nth [1 2 3] 2)
(doc concat)
(concat '() (list 1 2) (list 3 4))
(conj '() (list 1 2) (list 3 4))
(some #(= % 'n) [1 2 'n])
(some #(= % 'n) [1 2 3])
(if (some #(= % 'n) [1 2 3]) 'yes 'no)
(doc size)
(doc count)
(count [1 2 3])
(doc doall)
exit
(count "ABC")
exit
(:use prog-challenge.encode-num-seq)
(:use prog-challenge.encode-num-seq :reload)
(:use 'prog-challenge.encode-num-seq :reload)
(nth (encode-num-seq 0 "ABC") 100)
(use 'prog-challenge.encode-num-seq :reload)
(nth (encode-num-seq 0 "ABC") 100)
(nth (encode-num-seq 0 "ABC") 100000)
(nth (encode-num-seq 0 "ABC") 10000000)
(use 'prog-challenge.encode-num-seq :reload)
(nth (encode-num-seq 0 "ABC") 10000000)
(time @(nth (encode-num-seq 0 "ABC") 10000000))
(use 'prog-challenge.encode-num-seq :reload)
(time (nth (encode-num-seq 0 "ABC") 10000000))
exit
(use 'prog-challeng.encode-num-seq)
(use 'prog-challenge.encode-num-seq)
@(nth (encode-num-seq 0 "ABC") 10000000))
(use 'prog-challenge.encode-num-seq)
@(nth (encode-num-seq 0 "ABC") 10000000))
@(nth (encode-num-seq 0 "ABC") 10000000)
(nth (encode-num-seq 0 "ABC") 10000000)
(use 'prog-challenge.encode-num-seq)
(nth (encode-num-seq 0 "ABC") 10000000)
(use 'prog-challenge.encode-num-seq :reload)
(nth (encode-num-seq 0 "ABC") 10000000)
(time @(nth (encode-num-seq 0 "ABC") 10000000))
(defn pos-nums
([] (pos-num 1)
([n]
(cons n (pos-num (inc n)))))
)
(use 'prog-challeng.core)
(use 'prog-challenge.core)
(posnums)
(take 5 (posnums))
(use 'prog-challenge.core :reload)
(take 5 (posnums))
(posnums)
(use 'prog-challenge.encode-num-seq)
(nth (encode-num-seq-lazy 0 "ABC") 10000000)
(time (nth (encode-num-seq-lazy 0 "ABC") 10000000))
exit
