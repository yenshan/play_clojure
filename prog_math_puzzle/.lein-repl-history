exit
(doc case)
(Math/sqrt 2)
(Math/sqrt 2N)
(Math/sqrt ^double 2)
(Math/sqrt (^double 2))
(Math/sqrt (double 2))
(doc Math/sqrt)
(Math/sqrt 3)
(str (Math/sqrt 3))
(Math/sqrt 3)
xit
exit
(Math/sqrt 2)
(count (str (Math/sqrt 2)))
(count (str (* 10 (Math/sqrt 2))))
(Math/sqrt 2)
(* 10 (Math/sqrt 2))
(* 100 (Math/sqrt 2))
(doc sum)
(def sum (comp apply +))
(sum [1,2,3])
(def sum (partial apply +))
(sum [1,2,3])
(doc include?)
(doc include)
(doc not-any?)
(and true true)
(and true true true)
(apply and [true true])
(doc and)
(clojure.string/replace "1.23" #"." "")
(clojure.string/replace "1.23" #"\." "")
(clojure.string/split "12.23" #"\.")
(second (clojure.string/split "12.23" #"\."))
(doc remove)
(remove #(= % 1) [1 3, 4])
exit
(.toUpperChar "a")
(.toUpperChar \a)
(upper-case "abC")
(clojure.string/upper-case "abC")
(doc remove)
(doc sort-by)
(empty? [])
(range -1 -5 -1)
eixt
exit
(doc iterate)
(take 10 (iterate inc 1))
(take-while #(% < 500) (iterate inc 1)))
(take-while #(% < 500) (iterate inc 1))
(take-while #(< % 500) (iterate inc 1))
exit
